First Section: C_Data() Function
This function is designed to handle the UPDATE command in MySQL through a user interface built using pygame. The user interacts with a graphical interface to update a database table. Here's an overview of the steps in the function:

Initialization:

The function starts by setting up several variables, including the input fields for the column to be updated, the new value for the column, and the condition (WHERE) for the update.
It fetches the table structure from MySQL and prepares the list of columns.
Main Loop:

The screen is rendered, displaying the menu and input fields for the user to input:
The column number they want to update.
The new value (string) to update the column with.
The WHERE condition for the update.
There are interactive elements such as buttons (e.g., "Enter", "Back"), and mouse events are used for interaction.
Input Handling:

The user can type into text fields (e.g., column number, new value, condition) and the program handles both mouse clicks and keyboard events.
Once the user enters the necessary values, the input is validated (e.g., ensuring the column number is valid).
SQL Update:

Based on the user input, an UPDATE SQL query is executed, either updating a specific column with a new value or applying a condition with the WHERE clause.
After the update is executed, the program commits the transaction and shows a confirmation message.
Error Handling:

If there is any invalid input or exception during the update, appropriate error messages are shown, and the program logs the error.
Second Section: MySQL Data Retrieval (FindData and Related Functions)
This section of the code provides a system for interacting with and retrieving data from a MySQL database using a graphical interface built with pygame. It involves selecting databases, tables, and applying various query conditions (like SELECT, WHERE, ORDER BY). The flow is as follows:

FindData:

This function allows the user to select a database. It retrieves the list of available databases from MySQL and displays them in the interface. The user can click on a database to select it and proceed to the next step.
FindData_select_databasetable:

Once a database is selected, the user can choose a table from that database. The list of tables is fetched and displayed, and the user selects one to proceed.
FindData_select_opiom:

After selecting a table, this menu allows the user to choose between two options for the SELECT query:
Show the full table (SELECT *).
Show specific columns or apply conditions (WHERE, ORDER BY).
ShowTable:

This function displays the full table from the selected database and table. It fetches all the data from the table and displays it in a readable format.
ShowTableSpecific:

This function lets the user apply filters to the SELECT query. The user can specify which columns to select, set WHERE conditions, and order the results. The user can input conditions directly (e.g., "name = 'John'"), and the query is executed with the corresponding SQL statement.
Rendering:

In each step, pygame is used to render the UI and show the results, including the data fetched from MySQL.
Users interact with the interface by clicking buttons, selecting options, and entering query parameters in text fields.
Error Handling:

If there is an error in executing any SQL query (e.g., invalid column names or SQL syntax errors), the program catches these exceptions and displays error messages.
